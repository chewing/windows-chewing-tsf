// SPDX-License-Identifier: GPL-3.0-or-later

import { VerticalBox, StandardTableView, Button, TabWidget, HorizontalBox, LineEdit, AboutSlint, StandardButton, GridBox } from "std-widgets.slint";
import { Assets, Version } from "globals.slint";
import { BopomofoKeyboard } from "bopomofo-keyboard.slint";

export enum ErrorKind {
    ok,
    other,
}

export struct CallbackResult {
    error: ErrorKind,
    err_msg: string,
}

enum TabState {
    dict-info-close,
    dict-info-open,
    edit-entry-close,
    edit-entry-open
}

export global DictEntriesAdapter {
    in property <[[StandardListViewItem]]> entries;
    pure callback filter_sort_model([[StandardListViewItem]], string, int, bool) -> [[StandardListViewItem]];
    callback update_entry(string, int, bool, int, [StandardListViewItem]) -> CallbackResult;
}

export component EditorWindow inherits Window {
    preferred-height: 500px;
    title: "新酷音詞庫管理程式 (" + Version.product-version + ")";
    default-font-family: "微軟正黑體";
    icon: Assets.icon;
    in property <[[StandardListViewItem]]> dictionaries;
    in property <[[StandardListViewItem]]> dictionary-info;
    out property <int> edit-dict-current-row: -1;
    out property <string> phrase;
    out property <string> bopomofo;
    out property <string> freq;
    property <TabState> tab-state: TabState.dict-info-close;
    property <length> left-pan-width: 400px;
    property <CallbackResult> edit-result;
    property <string> search-text;
    property <int> sort-index: -1;
    property <bool> sort-ascending;

    callback reload-dict-info();
    callback info-clicked(row: [StandardListViewItem]);
    callback edit-dict-clicked(row: [StandardListViewItem]);
    callback edit-entry-new();
    callback edit-entry-delete();
    callback edit-dict-save() -> CallbackResult;
    callback quit();
    callback about();

    states [
        dict-info-close when tab-state == TabState.dict-info-close: {
            left-pan-width: 921px;
        }
        dict-info-open when tab-state == TabState.dict-info-open: {
            left-pan-width: 400px;
        }
        edit-entry-close when tab-state == TabState.edit-entry-close: {
            left-pan-width: 921px;
        }
        edit-entry-open when tab-state == TabState.edit-entry-open: {
            left-pan-width: 400px;
        }
    ]

    MenuBar {
        Menu {
            title: "檔案";
            MenuItem {
                title: "結束";
                activated => {
                    root.quit();
                }
            }
        }
        Menu {
            title: "說明";
            MenuItem {
                title: "關於酷音詞庫管理程式";
                activated => {
                    root.about();
                }
            }
        }
    }

    HorizontalBox {
        if tab-state == TabState.dict-info-open || tab-state == TabState.dict-info-close: VerticalBox {
            width: left-pan-width;
            HorizontalBox {
                alignment: start;
                Button {
                    text: "編輯";
                    enabled: table.current-row >= 0;
                    clicked => {
                        root.edit-dict-clicked(root.dictionaries[table.current-row]);
                        root.sort-index = -1;
                        tab-state = TabState.edit-entry-close;
                    }
                }

                // Button {
                //     text: "新增";
                // }

                // Button {
                //     text: "匯入";
                // }

                // Button {
                //     text: "匯出";
                // }

                // Button {
                //     text: "刪除";
                // }

                Button {
                    text: "重新整理";
                    clicked => {
                        root.reload-dict-info();
                        root.tab-state = TabState.dict-info-close;
                    }
                }
            }

            table := StandardTableView {
                columns: [{ title: "類型", width: 70px }, { title: "名稱", width: 100px }, { title: "檔案路徑", min_width: 400px }];
                rows: root.dictionaries;
                current-row-changed(current-row) => {
                    root.info-clicked(root.dictionaries[current-row]);
                    root.tab-state = TabState.dict-info-open;
                }
            }
        }
        if tab-state == TabState.edit-entry-open || tab-state == TabState.edit-entry-close: VerticalBox {
            width: left-pan-width;
            VerticalBox {
                width: 400px;
                HorizontalBox {
                    alignment: start;
                    Button {
                        text: "新增";
                        clicked => {
                            root.edit-entry-new();
                            entry-table.set-current-row(0);
                        }
                    }
    
                    Button {
                        text: "刪除";
                        enabled: root.edit-dict-current-row >= 0;
                        clicked => {
                            root.edit-entry-delete();
                            root.tab-state = TabState.edit-entry-close;
                        }
                    }
    
                    Button {
                        text: "放棄修改";
                        clicked => {
                            root.tab-state = TabState.dict-info-close;
                            root.edit-result = { }
                        }
                    }
    
                    Button {
                        text: "存檔";
                        clicked => {
                            root.edit-result = root.edit-dict-save();
                            if (root.edit-result.error == ErrorKind.ok) {
                                root.reload-dict-info();
                                root.tab-state = TabState.dict-info-close;
                            }
                        }
                    }
                }
    
                HorizontalBox {
                    search-edit := LineEdit {
                        placeholder-text: "搜尋";
                        changed text => {
                            root.search-text = self.text;
                            root.tab-state = TabState.edit-entry-close;
                        }
                    }
                }
    
                entry-table := StandardTableView {
                    columns: [{ title: "字/詞", horizontal_stretch: 0.3 }, { title: "注音", horizontal_stretch: 0.4 }, { title: "常用度", horizontal_stretch: 0.2 }];
                    rows: DictEntriesAdapter.filter_sort_model(DictEntriesAdapter.entries, search-edit.text, root.sort-index, root.sort-ascending);
                    sort-ascending(index) => {
                        root.sort-index = index;
                        root.sort-ascending = true;
                        root.tab-state = TabState.edit-entry-close;
                    }
                    sort-descending(index) => {
                        root.sort-index = index;
                        root.sort-ascending = false;
                        root.tab-state = TabState.edit-entry-close;
                    }
                    current-row-changed(current-row) => {
                        root.edit-dict-current-row = current-row;
                        root.phrase = self.rows[current-row][0].text;
                        root.bopomofo = self.rows[current-row][1].text;
                        root.freq = self.rows[current-row][2].text;
                        root.tab-state = TabState.edit-entry-open;
                    }
                }
            }
        }

        if tab-state == TabState.dict-info-open: HorizontalLayout {
            Path {
                width: 1px;
                height: 100%;
                stroke: Colors.lightgray;
                stroke-width: 1px;
                MoveTo {
                    x: 0;
                    y: 0;
                }

                LineTo {
                    x: 0;
                    y: 100;
                }
            }

            VerticalBox {
                StandardTableView {
                    columns: [{ title: "屬性", width: 100px }, { title: "內容" } ];
                    rows: root.dictionary-info;
                }
            }
        }
        if tab-state == TabState.edit-entry-open: VerticalBox {
            if root.edit-result.error != ErrorKind.ok: Rectangle {
                height: 40px;
                border-radius: 5px;
                border-width: 1px;
                border-color: Colors.lightgray;
                background: Colors.lightyellow;
                Text {
                    text: root.edit-result.err-msg;
                }
            }
            HorizontalLayout {
                Path {
                    width: 1px;
                    height: 100%;
                    stroke: Colors.lightgray;
                    stroke-width: 1px;
                    MoveTo {
                        x: 0;
                        y: 0;
                    }

                    LineTo {
                        x: 0;
                        y: 100;
                    }
                }

                VerticalBox {
                    alignment: start;
                    Text {
                        text: "字/詞：";
                    }

                    phrase := LineEdit {
                        text <=> root.phrase;
                    }

                    Text {
                        text: "注音：";
                    }

                    bopomofo := LineEdit {
                        text <=> root.bopomofo;
                    }

                    Text {
                        text: "常用度";
                    }

                    freq := LineEdit {
                        text <=> root.freq;
                    }

                    BopomofoKeyboard {
                        clicked(text) => {
                            bopomofo.clear-focus();
                            bopomofo.text += text;
                        }
                        clear-clicked => {
                            bopomofo.text = "";
                        }
                        done => {
                            root.edit-result = DictEntriesAdapter.update_entry(
                                root.search-text,
                                root.sort-index,
                                root.sort-ascending,
                                root.edit-dict-current-row,
                                [
                                    { text: root.phrase },
                                    { text: root.bopomofo },
                                    { text: root.freq },
                                ]
                            );
                            if root.edit-result.error == ErrorKind.ok {
                                tab-state = TabState.edit-entry-close;
                            }
                        }
                    }
                }
            }
        }
    }
}
