use anyhow::Result;

mod installer;
mod version;

mod flags {
    use super::installer::Target;

    xflags::xflags! {
        src "src/main.rs"

        /// cargo-xtask helper
        cmd xtask {
            /// Update the version.rc file.
            cmd update-version {
                /// The major version of the release. (u32)
                required --major MAJOR: u32
                /// The minor version of the release. (u32)
                required --minor MINOR: u32
                /// The patch version of the release. (u32)
                required --patch PATCH: u32
                /// Optional build number (u32)
                optional -b, --build BUILD_NUMBER: u32
            }
            /// Build the installer.
            cmd build-installer {
                /// Target platform [gnu, msvc]
                optional -t, --target TARGET: Target
                /// Build release artifact
                optional --release
            }
            cmd package-installer {

            }
        }
    }
    // generated start
    // The following code is generated by `xflags` macro.
    // Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
    #[derive(Debug)]
    pub struct Xtask {
        pub subcommand: XtaskCmd,
    }

    #[derive(Debug)]
    pub enum XtaskCmd {
        UpdateVersion(UpdateVersion),
        BuildInstaller(BuildInstaller),
        PackageInstaller(PackageInstaller),
    }

    #[derive(Debug)]
    pub struct UpdateVersion {
        pub major: u32,
        pub minor: u32,
        pub patch: u32,
        pub build: Option<u32>,
    }

    #[derive(Debug)]
    pub struct BuildInstaller {
        pub target: Option<Target>,
        pub release: bool,
    }

    #[derive(Debug)]
    pub struct PackageInstaller;

    impl Xtask {
        #[allow(dead_code)]
        pub fn from_env_or_exit() -> Self {
            Self::from_env_or_exit_()
        }

        #[allow(dead_code)]
        pub fn from_env() -> xflags::Result<Self> {
            Self::from_env_()
        }

        #[allow(dead_code)]
        pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
            Self::from_vec_(args)
        }
    }
    // generated end
}

fn main() -> Result<()> {
    let flags = flags::Xtask::from_env()?;

    match flags.subcommand {
        flags::XtaskCmd::UpdateVersion(flags) => {
            version::update_version(flags)?;
        }
        flags::XtaskCmd::BuildInstaller(flags) => {
            installer::build_installer(flags)?;
        }
        flags::XtaskCmd::PackageInstaller(flags) => {
            installer::package_installer(flags)?;
        }
    }

    Ok(())
}
